- name: Setting up the Ansible Automation Platform install
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - ../files/distributions.yml
    - ../files/vault.yml
  vars_prompt:
    - name: controller_url
      prompt: What is your server's fully qualified domain name?
      private: false

    - name: aap_distro
      prompt: "Which Ansible Automation Platform (AAP) distro to use 2.4, 2.5, 2.4containerized, 2.5containerized? default: 2.5containerized"
      private: false
      default: "2.5containerized"

  tasks:

    - name: Get our checksum
      loop: "{{ distributions }}"
      when: item['name'] == aap_distro
      ansible.builtin.set_fact:
        checksum: "{{ item['aap_sha_value'] }}"

    - name: Print out system checks
      ansible.builtin.debug:
        msg:
          - "Our stand alone controller_url: {{ controller_url }}"
          - "Total system memory: {{ ansible_memtotal_mb }} mb"
          - "Total cpu count: {{ ansible_processor_count }}"
          - "Red Hat Enterprise Linux: {{ ansible_distribution }} {{ ansible_facts['distribution_version'] }} {{ ansible_facts['userspace_architecture'] }}"
          - "Total disk space: {{ ansible_devices['nvme0n1']['partitions']['nvme0n1p4']['size'] }}"
          - "We are installing {{ aap_distro }} AAP the checksum is {{ checksum }}"

    - name: Check in with user
      ansible.builtin.pause:
        prompt: Please confirm that it is safe to proceed. Press return to continue. Press Ctrl+c and then "a" to abort

    - name: Ensure we have a access token the Red Hat Customer portal
      register: access_token
      until: access_token is not failed
      retries: 1
      delay: 20
      ansible.builtin.uri:
        url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        method: POST
        body_format: form-urlencoded
        return_content: true
        body:
          grant_type: refresh_token
          client_id: rhsm-api
          refresh_token: "{{ offline_token }}"

    - name: Preparing for a Legacy install
      when: aap_distro == "2.4" or
            aap_distro == "2.5"
      block:

        - name: Ensure we have the AAP bundle
          register: download_aap_tarball
          until: download_aap_tarball is not failed
          retries: 5
          delay: 20
          ansible.builtin.get_url:
            url: https://api.access.redhat.com/management/v1/images/{{ checksum }}/download
            headers:
              accept: application/json
              Authorization: Bearer {{ access_token.json.access_token }}
            dest: ~/aap.tar.gz
            checksum: "sha256: {{ checksum }}"

        - name: Ensure the aap bundle is opened up
          ansible.builtin.unarchive:
            src: ~/aap.tar.gz
            dest: ~/
            remote_src: true

        - name: Ensure we have the AAP bundle directory
          register: aap_bundle_dir
          changed_when: false
          ansible.builtin.shell: ls -d ansible-automation-platform-*
          args:
            chdir: ~/

        - name: Moving file to old name
          ansible.builtin.shell: "mv aap.tar.gz {{ aap_bundle_dir.stdout }}.tar.gz"
          args:
            chdir: ~/

        - name: Creating the new inventory file
          ansible.builtin.template:
            src: ../templates/legacy_aap_inventory_controller_file.j2
            dest: "{{ aap_bundle_dir.stdout }}/inventory"
            owner: root
            group: root
            mode: "0644"
            backup: true

    - name: Preparing for a containerized install
      when: aap_distro == "2.4containerized" or
            aap_distro == "2.5containerized"
      block:

        - name: Print
          debug:
            msg: "here i am"
